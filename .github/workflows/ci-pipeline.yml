name: CI Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  DOTNET_VERSION: '9.0.x'
  SONAR_PROJECT_KEY: rokudara-sen_turn-based-choice-rpg
  SONAR_ORG: rokudara-sen

jobs:
  merge-conflict-check:
    name: Merge Conflict Check
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - name: Check for Merge Conflicts
        uses: treosh/merge-conflict-check@v2
        with:
          fail: true
          comment: true
          check_commits: true
  
  build-and-test:
    name: Build and Test
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        needs: [merge-conflict-check]
        with:
          fetch-depth: 0

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build Solution
        run: dotnet build --configuration Release --no-restore
        
      - name: Create TestResults Directory
        run: mkdir -p TestResults

      - name: Run Unit Tests
        run: dotnet test --configuration Release --no-build --verbosity normal --logger "trx;LogFileName=TestResults/test-results.trx" --collect:"XPlat Code Coverage"

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            TestResults/test-results.trx
            TestResults/coverage.cobertura.xml

  code-quality:
    name: Code Quality (SonarQube)
    runs-on: windows-latest
    needs: [merge-conflict-check, build-and-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'
          
      - name: Ensure SonarQube Cache Directory Exists
        run: mkdir -p ~\sonar\cache

      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"${{ env.SONAR_PROJECT_KEY }}" /o:"${{ env.SONAR_ORG }}" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

  security-scan:
    name: Security Scan
    runs-on: windows-latest
    needs: [merge-conflict-check, build-and-test]

    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: 'csharp'

      - name: Build Solution
        run: dotnet build --configuration Release

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Cache SonarCloud
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar-${{ hashFiles('**/*.cs') }}
          restore-keys: |
            ${{ runner.os }}-sonar-
            
  approval-gate:
    name: Merge Approval
    runs-on: ubuntu-latest
    needs: [merge-conflict-check, build-and-test, code-quality, security-scan]
    if: always()
    steps:
      - name: Require Success
        if: |
          needs.build-and-test.result != 'success' ||
          needs.code-quality.result != 'success' ||
          needs.security-scan.result != 'success'
        run: exit 1
